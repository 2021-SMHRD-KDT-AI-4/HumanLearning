<<<<<<< HEAD
DROP table USER2;
DROP table VIDEO2;
DROP table VIDEO_HISTORY2;
DROP table KEYWORD2;
DROP table BOARD2;
DROP table BOARD_POST2;
DROP table COMMENT2;
DROP table MEMBERSHIP2;
DROP table CALENDAR2;
DROP table NOTE_CLASS;
DROP  SEQUENCE SEQ_VIDEO_ID;



SELECT 
    TO_CHAR(UPLOAD_TIME,'YYYY-MM-DD')  
FROM VIDEO2; 
=======
--DROP TABLE 문 모음
DROP TABLE MEMBERSHIPS CASCADE CONSTRAINT;
DROP TABLE USERS CASCADE CONSTRAINT;
DROP TABLE NOTE_CATEGORIES CASCADE CONSTRAINT;
DROP TABLE VIDEOS CASCADE CONSTRAINT;
DROP TABLE BOARDS CASCADE CONSTRAINT;
DROP TABLE KEYWORDS CASCADE CONSTRAINT;
DROP TABLE VIDEO_ANALYSES CASCADE CONSTRAINT;
DROP TABLE CALENDARS CASCADE CONSTRAINT;
>>>>>>> branch 'master' of https://github.com/2021-SMHRD-KDT-AI-4/HumanLearning.git

--CREATE TABLE 문 모음
CREATE TABLE MEMBERSHIPS
(
    MEMBERSHIP_ID      VARCHAR2(100)    NOT NULL, 
    USER_ID            VARCHAR2(100)    NULL, 
    MEMBERSHIP_NAME    VARCHAR2(100)    NULL
);

<<<<<<< HEAD
CREATE TABLE VIDEO2 (
	video_id	number				NOT NULL,
	user_id		varchar2(100)		NOT NULL,
	class_id    varchar2(100)       NOT NULL,
	file_name	varchar2(100)		NOT NULL,
	play_time	number				NOT NULL,
	upload_time	date				NOT NULL,
	note		VARCHAR2(255)		NOT NULL
);

CREATE TABLE NOTE_CLASS (
	class_id    number       NOT NULL,
	user_id		varchar2(100)		NOT NULL,
	class_name	varchar2(100)		NOT NULL
=======
CREATE TABLE USERS
(
    USER_ID          VARCHAR2(100)    NOT NULL, 
    MEMBERSHIP_ID    VARCHAR2(20)     DEFAULT 1, 
    USER_NAME        VARCHAR2(100)    NOT NULL, 
    USER_PW          VARCHAR2(100)    NOT NULL, 
    USER_AGE         VARCHAR2(20)     NOT NULL, 
    USER_GENDER      VARCHAR2(20)      NOT NULL, 
    USER_CAPACITY    NUMBER           NULL
>>>>>>> branch 'master' of https://github.com/2021-SMHRD-KDT-AI-4/HumanLearning.git
);


CREATE TABLE NOTE_CATEGORIES
(
    NOTE_ID      NUMBER           NOT NULL, 
    USER_ID      VARCHAR2(100)    NOT NULL, 
    NOTE_NAME    VARCHAR2(300)    NULL
);


CREATE TABLE VIDEOS
(
    VIDEO_ID          NUMBER            NOT NULL, 
    USER_ID           VARCHAR2(100)     NOT NULL, 
    NOTE_ID           NUMBER            NOT NULL, 
    VIDEO_FILENAME    VARCHAR2(300)     NULL, 
    PLAY_TIME         NUMBER            NOT NULL, 
    UPLOAD_TIME       DATE              NOT NULL, 
    VIDEO_MEMO        VARCHAR2(3000)    NULL
);


CREATE TABLE BOARDS
(
    ARTICLE_ID         NUMBER            NOT NULL, 
    USER_ID            VARCHAR2(100)     NOT NULL, 
    POST_TIME          DATE              NULL, 
    ARTICLE_TITLE      VARCHAR2(300)     NULL, 
    ARTICLE_CONTENT    VARCHAR2(3000)    NULL, 
    IMG_PATH           VARCHAR2(300)     NULL, 
    LIKE_NUM           NUMBER            NULL, 
    NUM					NUMBER			 DEFAULT 0
);

CREATE TABLE KEYWORDS
(
    KEYWORD_ID    NUMBER           NOT NULL, 
    USER_ID       VARCHAR2(100)    NOT NULL, 
    VIDEO_ID      NUMBER           NOT NULL, 
    KEYWORD       VARCHAR2(100)    NULL, 
    COUNT         NUMBER           NULL
);

CREATE TABLE VIDEO_ANALYSES
(
    ANALYSIS_ID      NUMBER            NOT NULL, 
    USER_ID          VARCHAR2(100)     NOT NULL, 
    VIDEO_ID         NUMBER            NOT NULL, 
    START_TIME       NUMBER            NULL, 
    EMD_TIME         NUMBER            NULL, 
    TRANS_CONTENT    VARCHAR2(3000)    NULL, 
    BOOKMARK         VARCHAR2(1)       NULL
);

CREATE TABLE CALENDARS
(
    CAL_ID         NUMBER            NOT NULL, 
    USER_ID        VARCHAR2(100)     NOT NULL, 
    CAL_DATE       DATE              NULL, 
    CAL_COMMENT    VARCHAR2(3000)    NULL
);

--PK설정
ALTER TABLE MEMBERSHIPS ADD CONSTRAINT PK_MEMBERSHIPS PRIMARY KEY (MEMBERSHIP_ID);
ALTER TABLE USERS ADD CONSTRAINT PK_USERS PRIMARY KEY (USER_ID);
ALTER TABLE NOTE_CATEGORIES ADD CONSTRAINT PK_NOTE_CATEGORIES PRIMARY KEY (NOTE_ID);
ALTER TABLE VIDEOS ADD CONSTRAINT PK_VIDEOS PRIMARY KEY (VIDEO_ID);
ALTER TABLE BOARDS ADD CONSTRAINT PK_BOARDS PRIMARY KEY (ARTICLE_ID);
ALTER TABLE KEYWORDS ADD CONSTRAINT PK_KEYWORDS PRIMARY KEY (KEYWORD_ID);
ALTER TABLE VIDEO_ANALYSES ADD CONSTRAINT PK_VIDEO_ANALYSES PRIMARY KEY (ANALYSIS_ID);
ALTER TABLE CALENDARS ADD CONSTRAINT PK_CALENDARS PRIMARY KEY (CAL_ID);

--여기서 부턴 실행X
--SEQUENCE 삭제
DROP SEQUENCE NOTE_CATEGORIES_SEQ;
DROP SEQUENCE VIDEOS_SEQ;
DROP SEQUENCE BOARDS_SEQ;
DROP SEQUENCE KEYWORDS_SEQ;
DROP SEQUENCE VIDEO_ANALYSES_SEQ;
DROP SEQUENCE CALENDARS_SEQ;


--SEQUENCE 생성
CREATE SEQUENCE NOTE_CATEGORIES_SEQ START WITH 1INCREMENT BY 1;
CREATE SEQUENCE VIDEOS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE BOARDS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE KEYWORDS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE VIDEO_ANALYSES_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE CALENDARS_SEQ START WITH 1 INCREMENT BY 1;

--FK 설정 
ALTER TABLE USERS ADD CONSTRAINT FK_USERS_MEMBERSHIP_ID_MEMBERS FOREIGN KEY (MEMBERSHIP_ID) REFERENCES MEMBERSHIPS (MEMBERSHIP_ID);
ALTER TABLE NOTE_CATEGORIES ADD CONSTRAINT FK_NOTE_CATEGORIES_USER_ID_USE FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE VIDEOS ADD CONSTRAINT FK_VIDEOS_USER_ID_USERS_USER_I FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE VIDEOS ADD CONSTRAINT FK_VIDEOS_NOTE_ID_NOTE_CATEGOR FOREIGN KEY (NOTE_ID) REFERENCES NOTE_CATEGORIES (NOTE_ID);
ALTER TABLE BOARDS ADD CONSTRAINT FK_BOARDS_USER_ID_USERS_USER_I FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE KEYWORDS ADD CONSTRAINT FK_KEYWORDS_USER_ID_USERS_USER FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE KEYWORDS ADD CONSTRAINT FK_KEYWORDS_VIDEO_ID_VIDEOS_VI FOREIGN KEY (VIDEO_ID) REFERENCES VIDEOS (VIDEO_ID);
ALTER TABLE VIDEO_ANALYSES ADD CONSTRAINT FK_VIDEO_ANALYSES_USER_ID_USER FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE VIDEO_ANALYSES ADD CONSTRAINT FK_VIDEO_ANALYSES_VIDEO_ID_VID FOREIGN KEY (VIDEO_ID) REFERENCES VIDEOS (VIDEO_ID);
ALTER TABLE CALENDARS ADD CONSTRAINT FK_CALENDARS_USER_ID_USERS_USE FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);

--TRIGGER 생성
CREATE OR REPLACE TRIGGER NOTE_CATEGORIES_AI_TRG 
BEFORE INSERT ON NOTE_CATEGORIES 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT NOTE_CATEGORIES_SEQ.NEXTVAL
    INTO :NEW.NOTE_ID
    FROM DUAL;
END;

CREATE OR REPLACE TRIGGER VIDEOS_AI_TRG
BEFORE INSERT ON VIDEOS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT VIDEOS_SEQ.NEXTVAL
    INTO :NEW.VIDEO_ID
    FROM DUAL;
END;

CREATE OR REPLACE TRIGGER BOARDS_AI_TRG
BEFORE INSERT ON BOARDS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT BOARDS_SEQ.NEXTVAL
    INTO :NEW.ARTICLE_ID
    FROM DUAL;
END;

CREATE OR REPLACE TRIGGER KEYWORDS_AI_TRG
BEFORE INSERT ON KEYWORDS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT KEYWORDS_SEQ.NEXTVAL
    INTO :NEW.KEYWORD_ID
    FROM DUAL;
END;

CREATE OR REPLACE TRIGGER VIDEO_ANALYSES_AI_TRG
BEFORE INSERT ON VIDEO_ANALYSES 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT VIDEO_ANALYSES_SEQ.NEXTVAL
    INTO :NEW.ANALYSIS_ID
    FROM DUAL;
END;

CREATE OR REPLACE TRIGGER CALENDARS_AI_TRG
BEFORE INSERT ON CALENDARS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT CALENDARS_SEQ.NEXTVAL
    INTO :NEW.CAL_ID
    FROM DUAL;
END;


<<<<<<< HEAD
ALTER TABLE CALENDAR2 ADD CONSTRAINT FK_USER_TO_CALENDAR FOREIGN KEY (user_id) REFERENCES USER2 (user_id);

ALTER TABLE VIDEO2 ADD CONSTRAINT FK_VIDEO_TO_KEYWORD_1 FOREIGN KEY (note) REFERENCES USER2 (note);

ALTER TABLE VIDEO2 ADD CONSTRAINT FK_VIDEO_TO_KEYWORD_1 FOREIGN KEY (note) REFERENCES USER2 (note);

SELECT upload_time(DATE, 'YYYY/MM/DD') FROM VIDEO2;

SELECT 
    upload_time(REGISTDATE,'YYYY-MM-DD') AS REG_DT 
FROM WRITETABLE 
WHERE TOCHAR(REGISTDATE, 'YYYY/MM/DD') = '2017/12/10';

ALTER TABLE VIDEO2 MODIFY (UPLOAD_TIME DEFAULT SYSDATE );

SELECT * FROM VIDEO2 WHERE USER_ID ='a';



CREATE SEQUENCE SEQ_VIDEO_ID
    START WITH 1
    INCREMENT BY 1;

    
CREATE SEQUENCE SEQ_VIDEO_ID
       INCREMENT BY 1
       START WITH 1
       MINVALUE 1
       MAXVALUE 9999
       NOCYCLE
       NOCACHE
       NOORDER;


       
CREATE TABLE VIDEO2 (
	video_id	number				NOT NULL,
	user_id		varchar2(100)		NOT NULL,
	note		VARCHAR2(255)		NOT NULL,
	class_id    varchar2(100)       NOT NULL,
	file_name	varchar2(100)		NOT NULL,
	play_time	number				NOT NULL,
	upload_time	date				NOT NULL
	
);


CREATE TABLE NOTE_CATEGORIES
(
    NOTE_ID      INT              NOT NULL, 
    USER_ID      VARCHAR2(100)    NOT NULL, 
    NOTE_NAME    VARCHAR2(300)    NULL, 
     PRIMARY KEY (NOTE_ID)
)
/

CREATE SEQUENCE NOTE_CATEGORIES_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER NOTE_CATEGORIES_AI_TRG
BEFORE INSERT ON NOTE_CATEGORIES 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT NOTE_CATEGORIES_SEQ.NEXTVAL
    INTO :NEW.NOTE_ID
    FROM DUAL;
END;
/

COMMENT ON TABLE NOTE_CATEGORIES IS '노트분류정보'
/

COMMENT ON COLUMN NOTE_CATEGORIES.NOTE_ID IS '노트아이디'
/

COMMENT ON COLUMN NOTE_CATEGORIES.USER_ID IS '회원아이디'
/

COMMENT ON COLUMN NOTE_CATEGORIES.NOTE_NAME IS '노트명'
/

ALTER TABLE NOTE_CATEGORIES
    ADD CONSTRAINT FK_NOTE_CATEGORIES_USER_ID_USE FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
/

CREATE TABLE VIDEOS
(
    VIDEO_ID          INT               NOT NULL, 
    USER_ID           VARCHAR2(100)     NOT NULL, 
    NOTE_ID           INT               NOT NULL, 
    VIDEO_FILENAME    VARCHAR2(300)     NULL, 
    PLAY_TIME         INT               NOT NULL, 
    UPLOAD_TIME       DATE              NOT NULL, 
    VIDEO_MEMO        VARCHAR2(3000)    NULL, 
     PRIMARY KEY (VIDEO_ID)
)
/

CREATE SEQUENCE VIDEOS_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER VIDEOS_AI_TRG
BEFORE INSERT ON VIDEOS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT VIDEOS_SEQ.NEXTVAL
    INTO :NEW.VIDEO_ID
    FROM DUAL;
END;
/

COMMENT ON TABLE VIDEOS IS '영상분석'
/

COMMENT ON COLUMN VIDEOS.VIDEO_ID IS '영상아이디'
/

COMMENT ON COLUMN VIDEOS.USER_ID IS '회원아이디'
/

COMMENT ON COLUMN VIDEOS.NOTE_ID IS '노트아이디'
/

COMMENT ON COLUMN VIDEOS.VIDEO_FILENAME IS '파일명'
/

COMMENT ON COLUMN VIDEOS.PLAY_TIME IS '재생시간'
/

COMMENT ON COLUMN VIDEOS.UPLOAD_TIME IS '업로드시간'
/

COMMENT ON COLUMN VIDEOS.VIDEO_MEMO IS '영상메모'
/

ALTER TABLE VIDEOS
    ADD CONSTRAINT FK_VIDEOS_USER_ID_USERS_USER_I FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
/

ALTER TABLE VIDEOS
    ADD CONSTRAINT FK_VIDEOS_NOTE_ID_NOTE_CATEGOR FOREIGN KEY (NOTE_ID)
        REFERENCES NOTE_CATEGORIES (NOTE_ID)
/

CREATE TABLE BOARDS
(
    ARTICLE_ID         INT               NOT NULL, 
    USER_ID            VARCHAR2(100)     NOT NULL, 
    POST_TIME          DATE              NULL, 
    ARTICLE_TITLE      VARCHAR2(300)     NULL, 
    ARTICLE_CONTENT    VARCHAR2(3000)    NULL, 
    IMG_PATH           VARCHAR2(300)     NULL, 
    LIKE_NUM           INT               NULL, 
     PRIMARY KEY (ARTICLE_ID)
)
/

CREATE SEQUENCE BOARDS_SEQ
START WITH 1
INCREMENT BY 1;
/












select * from video2

insert into VIDEO2 values(SEQ_VIDEO_ID.nextval, 'a', '한국사', 'test1',  270, sysdate, '한국사1');
insert into VIDEO2 values(SEQ_VIDEO_ID.nextval, 'a', '한국사', 'test2',  270, sysdate, '조선시대');
insert into VIDEO2 values(SEQ_VIDEO_ID.nextval, 'a', '국어', 'test3',  260, sysdate, '고전시가');
insert into VIDEO2 values(SEQ_VIDEO_ID.nextval, 'a', '영어', 'test4',  270, sysdate, '고려가요');
insert into VIDEO2 values(SEQ_VIDEO_ID.nextval, 'a', '수학', 'test5',  270, sysdate, '미적분');
insert into VIDEO2 values(SEQ_VIDEO_ID.nextval, 'a', '과학', 'test6',  270, sysdate, '생물');



SELECT * FROM VIDEO2 WHERE USER_ID ='a' order by class_id
delete from video2 where class_id = 'test'


SELECT * FROM VIDEO2;

INSERT INTO VIDEO2 VALUES(1,'a',1,'a',10,sysdate,'11');
INSERT INTO VIDEO2 VALUES(2,'a',2,'b',10,sysdate,'22');
INSERT INTO VIDEO2 VALUES(3,'a',1,'c',10,sysdate,'33');
INSERT INTO VIDEO2 VALUES(4,'a',2,'d',10,sysdate,'44');





CREATE TABLE VIDEOS
(
    VIDEO_ID          INT               NOT NULL, 
    USER_ID           VARCHAR2(100)     NOT NULL, 
    NOTE_ID           INT               NOT NULL, 
    VIDEO_FILENAME    VARCHAR2(300)     NULL, 
    PLAY_TIME         INT               NOT NULL, 
    UPLOAD_TIME       DATE              NOT NULL, 
    VIDEO_MEMO        VARCHAR2(3000)    NULL, 
     PRIMARY KEY (VIDEO_ID)
)
/

CREATE SEQUENCE VIDEOS_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER VIDEOS_AI_TRG
BEFORE INSERT ON VIDEOS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT VIDEOS_SEQ.NEXTVAL
    INTO :NEW.VIDEO_ID
    FROM DUAL;
END;
/

COMMENT ON TABLE VIDEOS IS '영상분석'
/

COMMENT ON COLUMN VIDEOS.VIDEO_ID IS '영상아이디'
/

COMMENT ON COLUMN VIDEOS.USER_ID IS '회원아이디'
/

COMMENT ON COLUMN VIDEOS.NOTE_ID IS '노트아이디'
/

COMMENT ON COLUMN VIDEOS.VIDEO_FILENAME IS '파일명'
/

COMMENT ON COLUMN VIDEOS.PLAY_TIME IS '재생시간'
/

COMMENT ON COLUMN VIDEOS.UPLOAD_TIME IS '업로드시간'
/

COMMENT ON COLUMN VIDEOS.VIDEO_MEMO IS '영상메모'
/

ALTER TABLE VIDEOS
    ADD CONSTRAINT FK_VIDEOS_USER_ID_USERS_USER_I FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
/

ALTER TABLE VIDEOS
    ADD CONSTRAINT FK_VIDEOS_NOTE_ID_NOTE_CATEGOR FOREIGN KEY (NOTE_ID)
        REFERENCES NOTE_CATEGORIES (NOTE_ID)
/




CREATE OR REPLACE TRIGGER NOTE_CATEGORIES_AI_TRG 
BEFORE INSERT ON NOTE_CATEGORIES 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT NOTE_CATEGORIES_SEQ.NEXTVAL
    INTO :NEW.NOTE_ID
    FROM DUAL;
END;



SELECT * FROM videos;



=======
INSERT INTO USERS values ('admin', '1', '관리자', '1234', '25', '여자', '');
INSERT INTO USERS values ('admin1', '1', '관리자1', '1234', '25', '남자', '');

SELECT* FROM USERS;
SELECT* FROM BOARDS;
SELECT* FROM CALENDARS;
>>>>>>> branch 'master' of https://github.com/2021-SMHRD-KDT-AI-4/HumanLearning.git
